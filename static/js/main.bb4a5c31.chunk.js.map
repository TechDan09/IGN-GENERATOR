{"version":3,"sources":["Components/Header.js","Components/Body.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","Component","Body","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","newIgn","onClick","changeIgn","App","_this","generateName","state","bind","assertThisInitialized","setState","Fragment","Header_Header","particles_default","params","particles","number","value","density","enable","size","random","move","direction","out_mode","line_linked","interactivity","events","onclick","mode","modes","remove","particles_nb","Body_Body","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRACqBA,mLAGjB,OACEC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,MAAIC,UAAW,UAAf,sCAL6BC,IAAMC,WCCrBC,cACpB,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACXH,0EAIN,OADAO,QAAQC,MAENf,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+EACZH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,aAAKQ,KAAKH,MAAMS,OAAhB,KACAhB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6CAA6Cc,QAASP,KAAKH,MAAMW,WAAnF,2BAXwBd,IAAMC,yCCqEzBc,cA7Db,SAAAA,EAAYZ,GAAM,IAAAa,EAAA,OAAAZ,OAAAC,EAAA,EAAAD,CAAAE,KAAAS,IAChBC,EAAAZ,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAW,GAAAN,KAAAH,KAAMH,KAFRS,OAASK,MAGPD,EAAKE,MAAO,CACVN,OAAQI,EAAKJ,QAEfI,EAAKF,UAAYE,EAAKF,UAAUK,KAAff,OAAAgB,EAAA,EAAAhB,CAAAY,IALDA,2EAShBV,KAAKM,OAASK,MACdX,KAAKe,SAAS,CAACT,OAAQN,KAAKM,0CAI5B,OACEhB,EAAAC,EAAAC,cAACF,EAAAC,EAAMyB,SAAP,KACA1B,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,CACIE,UAAW,YACX0B,OAAQ,CACNC,UAAa,CACTC,OAAU,CACNC,MAAS,IACTC,QAAW,CACPC,QAAU,IAGlBC,KAAQ,CACJH,MAAS,EACTI,QAAU,GAEdC,KAAQ,CACJC,UAAa,SACbC,SAAY,OAEhBC,YAAe,CACXN,QAAU,IAGlBO,cAAiB,CACbC,OAAU,CACNC,QAAW,CACPT,QAAU,EACVU,KAAQ,WAGhBC,MAAS,CACLC,OAAU,CACNC,aAAgB,SAMlC/C,EAAAC,EAAAC,cAAC8C,EAAD,CAAM9B,UAAWR,KAAKQ,UAAWF,OAAQN,KAAKY,MAAMN,SACpDhB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,IAA+BH,EAAAC,EAAAC,cAAA,8CAA/B,aAzDYE,IAAMC,WCIJ4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bb4a5c31.chunk.js","sourcesContent":["import React from 'react';\r\nexport default class Header extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      \t<h1 className= 'header'> Welcome To IGN Generator </h1>\r\n      </div>\r\n    );\r\n  }\r\n}","/* eslint-disable no-useless-constructor */\r\nimport React from 'react';\r\nexport default class Body extends React.Component {\r\n\tconstructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    console.log()\r\n    return (\r\n      <div>\r\n      \t<div className=\"transbox br3 pa3 ba b--white-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n          <h1> Your IGN is: </h1>\r\n          <p> {this.props.newIgn} </p>\r\n          <button className=\"f6 link dim ph3 pv2 mb2 dib white bg-black\" onClick={this.props.changeIgn}> Generate IGN </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Particles from 'react-particles-js';\r\nimport Header from './Components/Header';\r\nimport Body from './Components/Body';\r\nimport './App.css';\r\nimport 'tachyons';\r\nimport generateName from \"sillyname\";\r\n\r\nclass App extends React.Component {\r\n  newIgn = generateName()\r\n  constructor(props){\r\n    super(props);\r\n    this.state ={\r\n      newIgn: this.newIgn\r\n    };\r\n    this.changeIgn = this.changeIgn.bind(this);\r\n  } \r\n  \r\n  changeIgn() {\r\n    this.newIgn = generateName();\r\n    this.setState({newIgn: this.newIgn});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n      <Header />\r\n      <Particles\r\n          className= 'particles'\r\n          params={{\r\n            \"particles\": {\r\n                \"number\": {\r\n                    \"value\": 160,\r\n                    \"density\": {\r\n                        \"enable\": false\r\n                    }\r\n                },\r\n                \"size\": {\r\n                    \"value\": 7,\r\n                    \"random\": true\r\n                },\r\n                \"move\": {\r\n                    \"direction\": \"bottom\",\r\n                    \"out_mode\": \"out\"\r\n                },\r\n                \"line_linked\": {\r\n                    \"enable\": false\r\n                }\r\n            },\r\n            \"interactivity\": {\r\n                \"events\": {\r\n                    \"onclick\": {\r\n                        \"enable\": true,\r\n                        \"mode\": \"remove\"\r\n                    }\r\n                },\r\n                \"modes\": {\r\n                    \"remove\": {\r\n                        \"particles_nb\": 10\r\n                    }\r\n                }\r\n            }\r\n        }} \r\n      />\r\n      <Body changeIgn={this.changeIgn} newIgn={this.state.newIgn}/>\r\n      <p className=\"footer-credits\"> <i>Developed by TechDan & Jerry Navi</i> </p>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}